Partitions with given difference
1>>Memoization
import java.util.* ;
import java.io.*; 
public class Solution {
	 static int mod=(int)1e9+7;
	 public static int helper(int ind,int t,int[]a,int[][]dp)
    {
        
        if(ind==0)
        {
        if (a[0]==0&&t==0)
        {
            return 2;
        }
        if(t==0||t==a[0])
        {
            return 1;
        }
            return 0;
        
        }
        if(dp[ind][t]!=-1)
        {
            return dp[ind][t];
        }
        int nonpick= helper(ind-1,t,a,dp);
        int pick=0;
        if(t>=a[ind]){
     pick= helper(ind-1,t-a[ind],a,dp);
        }
        return  dp[ind][t]=(pick+nonpick)%mod;
    }

	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here. 
int sum=0;
for(int i=0;i<arr.length;i++)
{
	sum=sum+arr[i];
}
if(sum-d<0||(sum-d)%2!=0)
{
	return 0;
}
int dp[][]= new int[n][sum+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                dp[i][j]=-1;
            }
        }
        return helper(n-1,(sum-d)/2,arr,dp);
	}
}

2>>Tabulation
import java.util.* ;
import java.io.*; 
public class Solution {
	 static int mod=(int)1e9+7;

	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here. 
int sum=0;
for(int i=0;i<arr.length;i++)
{
	sum=sum+arr[i];
}
if(sum-d<0||(sum-d)%2!=0)
{
	return 0;
}
int x=(sum-d)/2;

		int dp[][]= new int[n][x+1];
        if(arr[0]==0)
        {
            dp[0][0]=2;
        }else{
            dp[0][0]=1;
        }
        if(arr[0]!=0&&arr[0]<=x)
        {
            dp[0][arr[0]]=1;
        }
    for(int ind=1;ind<n;ind++)
        {
            for(int t=0;t<=x;t++)
            {
         int nonpick= dp[ind-1][t];
        int pick=0;
        if(t>=arr[ind]){
     pick= dp[ind-1][t-arr[ind]];
        
            }
            dp[ind][t]=(pick+nonpick)%mod;
        }
        }
        return dp[n-1][x];

    }
    }
