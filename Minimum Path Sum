Minimum Path Sum
1>>Recursion
class Solution {
    public static int helper(int i,int j,int[][]grid)
    {
        if(i==0&&j==0)
        {
            return grid[i][j];
        }
        if(i<0||j<0)
        {
            return Integer.MAX_VALUE;
        }
    
        int up= helper(i-1,j,grid);
        int left= helper(i,j-1,grid);
        int x=Math.min(up,left);
          return grid[i][j]+x;
       

    }
    public int minPathSum(int[][] grid) {
        
        int m= grid.length;
        int n=grid[0].length;
        return helper(m-1,n-1,grid);
    }
}
output:TLE


2>>Memoization
class Solution {
    public static int helper(int i,int j,int[][]grid,int dp[][])
    {
        if(i==0&&j==0)
        {
            return grid[i][j];
        }
        if(i<0||j<0)
        {
            return Integer.MAX_VALUE;
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
    
        int up= helper(i-1,j,grid,dp);
        int left= helper(i,j-1,grid,dp);
        int x=Math.min(up,left);
        return  dp[i][j]= grid[i][j]+x;
    

    }
    public int minPathSum(int[][] grid) {
        int m= grid.length;
        int n=grid[0].length;
        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                dp[i][j]=-1;
            }
        }
        return helper(m-1,n-1,grid,dp);
    }
}


3>>Tabulation
class Solution {
    
    public int minPathSum(int[][] grid) {
        
        int m= grid.length;
        int n=grid[0].length;
        int dp[][]=new int[m][n];
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0&&j==0)
                {
                    dp[0][0]=grid[0][0];
                }else 
                {  int up=0;

if(i>0)
{
    up+=dp[i-1][j];
}else
{
    up+=Integer.MAX_VALUE;
}
int left=0;
if(j>0)
{
    left+=dp[i][j-1];
}else
{
    left+=Integer.MAX_VALUE;
}
int x= grid[i][j]+Math.min(up,left);
dp[i][j]=x;

                }
            }
        }
        return dp[m-1][n-1];
    
    }
}
