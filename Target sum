Target sum
1..>> Memoization
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int helper(int ind,int t,int[]arr,int[][]dp)
    {
        if(ind==0){
        if(arr[0]==0&&t==0)
        {
            return 2;
        }
     if(t==0||t==arr[0])
        {
            return 1;
        }
            return 0;
        
        }
        if(dp[ind][t]!=-1)
        {
            return dp[ind][t];
        }

        int nonpick=0+helper(ind-1,t,arr,dp);
        int pick=0;
        if(arr[ind]<=t)
        {
            pick=helper(ind-1,t-arr[ind],arr,dp);
        }
        return dp[ind][t]= pick+nonpick;
    }
    public static int targetSum(int n, int target, int[] arr) {
    	// Write your code here.
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum=sum+arr[i];
        }
        int x= (sum-target)/2;
        if( (sum-target)<0||(sum-target)%2!=0)
        {
            return 0;
        }
        int dp[][]= new int[n][x+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<=x;j++)
            {
                dp[i][j]=-1;
            }
        }
        return helper(n-1, x,arr,dp);


    }
}
2>>Tabulation
import java.util.* ;
import java.io.*; 
public class Solution {
   
    public static int targetSum(int n, int target, int[] arr) {
    	// Write your code here.
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum=sum+arr[i];
        }
        int x= (sum-target)/2;
        if( (sum-target)<0||(sum-target)%2!=0)
        {
            return 0;
        }
 int dp[][]= new int[n][x+1];
        if(arr[0]==0)
        {
            dp[0][0]=2;
        }else{
            dp[0][0]=1;
        }
     if(arr[0]!=0&&x>=arr[0])
        {
            dp[0][arr[0]]=1;
        }

        for(int ind=1;ind<n;ind++)
        {
            for(int tar=0;tar<=x;tar++)
            {
 int nonpick=dp[ind-1][tar];
        int pick=0;
        if(arr[ind]<=tar)
        {
            pick=dp[ind-1][tar-arr[ind]];
        }
         dp[ind][tar]= pick+nonpick;
            }
        }
        return dp[n-1][x];


    }
}
