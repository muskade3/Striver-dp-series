Number Of Subsets
1>>Memoization
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int findWays(int num[], int tar) {
        int n=num.length;

        int dp[][]= new int[n][tar+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<tar+1;j++)
            {
                dp[i][j]=-1;
            }
        }
        return helper(n-1,tar,num,dp);

    }
     public static int helper(int ind,int t,int[]a,int[][]dp)
    {
        
        if(ind==0)
        {
        if (a[0]==0&&t==0)
        {
            return 2;
        }
        if(t==0||t==a[0])
        {
            return 1;
        }
         return 0;
        
        }
        if(dp[ind][t]!=-1)
        {
            return dp[ind][t];
        }
        int nonpick= helper(ind-1,t,a,dp);
        int pick=0;
        if(t>=a[ind]){
     pick= helper(ind-1,t-a[ind],a,dp);
        }
        return  dp[ind][t]=pick+nonpick;
    }
}

2>>Tabulation
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int findWays(int num[], int tar) {
        int n=num.length;

        int dp[][]= new int[n][tar+1];
         if(num[0]==0)
        {
            dp[0][0]=2;
        }else{
            dp[0][0]=1;
        }
        if(num[0]!=0&&num[0]<=tar)
        {
            dp[0][num[0]]=1;
        }
    for(int ind=1;ind<n;ind++)
        {
            for(int t=0;t<=tar;t++)
            {
         int nonpick= dp[ind-1][t];
        int pick=0;
        if(t>=num[ind]){
     pick= dp[ind-1][t-num[ind]];
        
            }
            dp[ind][t]=pick+nonpick;
        }
        }
        return dp[n-1][tar];

    }
    }
    
