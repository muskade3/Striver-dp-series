Frog jump
1:> Recursion


import java.util.* ;
import java.io.*; 
public class Solution {
    public static int helper(int ind,int[]heights)
    {
        if(ind==0)
        {
            return 0;
        }
        int left=helper(ind-1,heights)+Math.abs(heights[ind]-heights[ind-1]);
        int right=Integer.MAX_VALUE;
        if(ind>1)
        {
            right=helper(ind-2,heights)+Math.abs(heights[ind]-heights[ind-2]);
       
        }
        return Math.min(left,right);
    }
    public static int frogJump(int n, int heights[]) {

        // Write your code here..
        return helper(n-1,heights);
    }

}


 2:> Memoization
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int helper(int ind,int[]heights,int[]dp)
    {
        if(ind==0)
        {
            return 0;
        }
        if(dp[ind]!=-1)
        {
            return dp[ind];
        }
        int left=helper(ind-1,heights,dp)+Math.abs(heights[ind]-heights[ind-1]);
        
        int right=Integer.MAX_VALUE;

        if(ind>1)
        {
        right=helper(ind-2,heights,dp)+Math.abs(heights[ind]-heights[ind-2]);
       
        }
        
    dp[ind]=Math.min(left,right);
    return dp[ind];
    
    }
    public static int frogJump(int n, int heights[]) {

        // Write your code here..
        int dp[]= new int[n+1];
        for(int i=0;i<dp.length;i++)
        {
            dp[i]=-1;
        }
        return helper(n-1,heights,dp);
    }

}

3:>Tabulation
import java.util.* ;
import java.io.*; 
public class Solution {

    public static int frogJump(int n, int heights[]) {

        // Write your code here..
        int dp[]= new int[n];
        for(int i=0;i<dp.length;i++)
        {
            dp[i]=-1;
        }
        dp[0]=0;
    for(int i=1;i<dp.length;i++)
    {
        int fs=dp[i-1]+Math.abs(heights[i]-heights[i-1]);
        int ss=Integer.MAX_VALUE;
        if(i>1)
        {
            ss=dp[i-2]+Math.abs(heights[i]-heights[i-2]);
        }
        dp[i]=Math.min(fs,ss);
    }
    return dp[n-1];
    }

}


4:>Space Optimization
import java.util.* ;
import java.io.*; 
public class Solution {

    public static int frogJump(int n, int heights[]) {

        // Write your code here..
        int dp[]= new int[n];
        for(int i=0;i<dp.length;i++)
        {
            dp[i]=-1;
        }
    int prev1=0;
    int prev2=0;

    for(int i=1;i<dp.length;i++)
    {
        int fs=prev1+Math.abs(heights[i]-heights[i-1]);
        int ss=Integer.MAX_VALUE;
        if(i>1)
        {
            ss=prev2+Math.abs(heights[i]-heights[i-2]);
        }
        int curr=Math.min(fs,ss);
        prev2=prev1;
        prev1=curr;
    }
    return prev1;
    }

}
